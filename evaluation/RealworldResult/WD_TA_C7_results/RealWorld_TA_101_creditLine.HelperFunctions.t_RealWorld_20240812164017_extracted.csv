Integer Overflow/Underflow Identified,Reentrancy Identified,Unchecked External Calls Identified,Unchecked Low-level Calls Identified,Transactions Order Dependence Identified,Timestamp Manipulation Identified,Predictable Randomness Identified,Unsafe `tx.origin` Identified,Unsafe Suicide Identified,Gas Limit Identified,Price Manipulation Identified,Assumption of Fixed-Length Array Identified,Lack of Withdrawal Function Identified,Lack of Authorization Identified,Potential Data Inconsistency Identified,Hash Collision Identified,Uninitialized Return Variable Identified,Misdeclared Constructor Identified,Missing 'onlyOwner' Modifier Identified,Misuse of `msg.value` within a Loop Identified,Precision Loss Identified,Redundant Conditional Check Identified,External Oracle Dependency Identified,Ownership Hijacking Identified,Centralization Risk Identified,Incorrect Funding Rate Calculation Identified,Flash Loan Fee Manipulation Identified,Misuse of Mapping Getter Identified,Lack of Getter Function Implementation Identified,Unnecessary Comparison Identified,Inconsistent Initialization Identified,Potential Inconsistency in Yield Source Swapping Identified,Incorrect Signer Verification Identified,Order of Inheritance Initialization Identified,Impracticality of Exact Match Identified,Inconsistent Base Tokens Identified,Handling Partial Withdrawals Identified,Fallback Function Identified,Unlimited Token Approval Identified,Lack of Input Validation Identified,DoS Vulnerability Identified
"<INFO> Integer Overflow/Underflow Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, along with recommended mitigation measures or fixes that do not require code upgrades.
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Reentrancy Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unchecked External Calls Identified."".
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unchecked Low-level Calls Identified."".
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Transactions Order Dependence Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, along with recommended mitigation measures or fixes that do not require code upgrades
'''
```
If you don't find any Transactions Order Dependence vulnerabilities, respond only with: ""","<INFO> Timestamp Manipulation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Predictable Randomness Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unsafe `tx.origin` Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unsafe Suicide Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Lack of Restriction on `selfdestruct` is found, respond only with: ""","<INFO> Gas Limit Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Price Manipulation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code.
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Assumption of Fixed-Length Array Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code.
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Lack of Withdrawal Function Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If a secure withdrawal function is found and no issues are identified, respond only with: ""","<INFO> Lack of Authorization Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Lack of Authorization vulnerabilities are found, respond only with: ""","<INFO> Potential Data Inconsistency Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Potential Data Inconsistency vulnerabilities are found, respond only with: ""","<INFO> Hash Collision Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Hash Collision vulnerabilities are found, respond only with: ""","<INFO> Uninitialized Return Variable Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Uninitialized Return Variable vulnerabilities are found, respond only with: ""","<INFO> Misdeclared Constructor Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If NO Misdeclared Constructor vulnerabilities are found, respond only with: ""","<INFO> Missing 'onlyOwner' Modifier Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Misuse of `msg.value` within a Loop Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Precision Loss Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Redundant Conditional Check Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> External Oracle Dependency Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: """,,"<INFO> Centralization Risk Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Incorrect Funding Rate Calculation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Flash Loan Fee Manipulation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Misuse of Mapping Getter Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Lack of Getter Function Implementation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unnecessary Comparison Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Inconsistent Initialization Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Potential Inconsistency in Yield Source Swapping Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Incorrect Signer Verification Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Order of Inheritance Initialization Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Impracticality of Exact Match Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Inconsistent Base Tokens Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Handling Partial Withdrawals Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Fallback Function Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Unlimited Token Approval Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> Lack of Input Validation Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code
'''
```
If you don't find any vulnerabilities, respond only with: ""","<INFO> DoS Vulnerability Identified.""
For each vulnerability identified, use the following format:
```
VULNERABILITY NAME or TYPE
'''
DETAILED DESCRIPTION of the vulnerability, along with recommended mitigation measures or fixes that do not require code upgrades.
'''
```
If you don't find any vulnerabilities, respond only with: """
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"<INFO> Inconsistent Base Tokens Identified.

```
INCONSISTENT BASE TOKENS
'''
The contract does not verify that both the old and new strategies use the same base token during migration. This lack of verification can lead to scenarios where the new strategy accepts a different base token than what was previously used. As a result, tokens received during migration may not be recognized by the contract, leading to potential loss of funds.

To mitigate this vulnerability, it is essential to implement a check during the migration process that verifies the base token of the new strategy matches that of the old strategy. This can be done by adding a function that compares the base tokens of both strategies before allowing the migration to proceed. If the tokens do not match, the migration should be reverted, ensuring that funds remain accessible and secure.
'''
```

[2024-12-08 16:42:01 INFO] **[Seminar Conclusion]**:

 ",,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"<INFO> Inconsistent Base Tokens Identified.

```
INCONSISTENT BASE TOKENS
'''
The contract does not verify that both the old and new strategies use the same base token during migration. This lack of verification can lead to scenarios where the new strategy accepts a different base token than what was previously used. As a result, tokens received during migration may not be recognized by the contract, leading to potential loss of funds.

To mitigate this vulnerability, it is essential to implement a check during the migration process that verifies the base token of the new strategy matches that of the old strategy. This can be done by adding a function that compares the base tokens of both strategies before allowing the migration to proceed. If the tokens do not match, the migration should be reverted, ensuring that funds remain accessible and secure.
'''
```

[2024-12-08 16:42:01 INFO] **[Execute Detail]**

execute SimplePhase:[PartialWithdrawalsDetector] in ComposedPhase:[CodeReview], cycle 1

[2024-12-08 16:42:01 INFO] System: **[chatting]**

| Parameter | Value |
| --- | --- |
| **task_prompt** | pragma solidity 0.7.6; pragma abicoder v2; import './Helpers/CLParent.sol'; import '../../PriceOracle.sol'; import '@openzeppelin/contracts/math/SafeMath.sol'; contract CreditLine_HelperFunctionTests is CLParent {     using SafeMath for uint256; CreditLine creditLine; PriceOracle priceOracle;  uint256 constant YEAR_IN_SECONDS = 365 days; uint256 constant SCALING_FACTOR = 1e18;  uint256 public creditLineId; address public borrowAssetStrategy; address public collateralStrategy; uint256 _ratioOfPrices; uint256 _decimals; uint256 calculatedInterest; uint256 calculatedCollateralRatio; uint256 borrowRate; uint256 principal; uint256 totalInterestRepaid; uint256 collateralRatio; uint256 collateralTokens;  function setUp() public virtual {     CLSetUp();      creditLine = CreditLine(creditLineAddress);     priceOracle = PriceOracle(priceOracleAddress);      (_ratioOfPrices, _decimals) = priceOracle.getLatestPrice(address(usdc), address(borrowAsset));      requestData.requestTo = address(lender);     // Borrow Asset equivalent of 1,000,000,000 in USD     requestData.borrowLimit = uint128(uint256(CLConstants.maxBorrowLimit / 1e6).mul(_ratioOfPrices).div(10**_decimals));     requestData.borrowRate = CLConstants.maxBorrowRate / 1e18;     requestData.autoLiquidation = false;     requestData.collateralRatio = CLConstants.maxCollteralRatio / 1e18;     requestData.borrowAsset = address(borrowAsset);     requestData.borrowAssetStrategy = noYieldAddress;     requestData.collateralAsset = address(collateralAsset);     requestData.collateralStrategy = noYieldAddress;     requestData.requestAsLender = false;      creditLineId = goToActiveStage();      // Setting global parameters     borrowAssetStrategy = requestData.borrowAssetStrategy;     collateralStrategy = requestData.collateralStrategy; }  //----------------------- Credit line calculateInterest tests -----------------------//  // Should have zero interest when principal is not borrowed, after collateral is deposited function test_calculateInterest_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      // Time travel by 10 days     _increaseBlock(block.timestamp + timeElapsed);      // Interest after depositing collateral should be zero     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);     assertEq(currentInterest, 0); }  // Should have non-zero interest after principal is borrowed function test_calculateInterest_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_calculatedInterest(creditLineId, timeElapsed); }  // Should have non-zero interest after some amount is repaid and zero after entire amount is repaid function test_calculateInterest_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);     _increaseBlock(block.timestamp + 10 days);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, currentDebt.sub(Borrowable).add(1), currentDebt);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculatedInterest(creditLineId, timeElapsed);      _increaseBlock(block.timestamp + 10 days);      uint256 remainingDebt = creditLine.calculateCurrentDebt(creditLineId);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), remainingDebt);     borrower.setAllowance(address(creditLine), address(borrowAsset), remainingDebt);      borrower.repay(address(creditLine), creditLineId, remainingDebt);      // Interest after repaying entire credit line should be zero     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);     assertEq(currentInterest, 0); }  //----------------------- Credit line calculateInterest, assert helper -----------------------//  function assert_calculatedInterest(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, _timeElapsed).div(SCALING_FACTOR);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed).div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     assertEq(currentInterest, calculatedInterest); }  //----------------------- Credit line calculateInterestAccrued tests -----------------------//  // Should have zero interest when principal is not borrowed, after collateral is deposited function test_calculateInterestAccrued_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     _increaseBlock(block.timestamp + timeElapsed);      uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);     assertEq(currentInterest, 0); }  // Should have non-zero interest after principal is borrowed function test_calculateInterestAccrued_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateInterestAccrued(creditLineId, timeElapsed); }  // Should have non-zero interest after some amount is repaid function test_calculateInterestAccrued_noPrincipal_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      uint256 interest = creditLine.calculateInterestAccrued(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, interest);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateInterestAccrued(creditLineId, timeElapsed); }  //----------------------- Credit line calculateInterestAccrued, assert helper -----------------------//  function assert_calculateInterestAccrued(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentInterest = creditLine.calculateInterestAccrued(_creditLineId);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);     if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;     } else {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     }     assertEq(currentInterest, calculatedInterest); }  //----------------------- Credit line calculateCurrentDebt tests -----------------------//  // Should have zero debt when principal is not borrowed, after collateral is deposited function test_calculateCurrentDebt_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     _increaseBlock(block.timestamp + timeElapsed);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     assertEq(currentDebt, 0); }  // Should have non-zero debt immediately after principal is borrowed function test_calculateCurrentDebt_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);      _increaseBlock(block.timestamp + timeElapsed);     assert_calculateCurrentDebt(creditLineId, timeElapsed); }  // Should have less debt after some amount is repaid function test_calculateCurrentDebt_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, currentDebt);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);      currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);     assertEq(currentDebt, currentInterest.add(principal).sub(totalInterestRepaid)); }  //----------------------- Credit line calculateCurrentDebt, assert helper -----------------------//  function assert_calculateCurrentDebt(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);     if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;     } else {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     }     assertEq(currentDebt, calculatedInterest.add(principal)); }  //----------------------- Credit line calculateTotalCollateralTokens tests -----------------------//  // Should have same amount of collateral tokens, after addCollateral operation function test_calculateTotalCollateralTokens_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     uint256 timeElapsed = 10 days;     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  // Should have same amount of collateral tokens, after addCollateral operation function test_calculateTotalCollateralTokens_DepositCollateralTwice(uint128 _amount, uint128 _secondAmount) public {     uint256 maxAmount = collateralAsset.totalSupply();     uint256 amount = scaleToRange256(_amount, 1, maxAmount.div(3));     uint256 secondAmount = scaleToRange256(_secondAmount, 1, maxAmount.div(3));     uint256 timeElapsed = 5 days;     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares);      // Adding collateral again     admin.transferToken(address(collateralAsset), address(borrower), secondAmount);     borrower.setAllowance(address(creditLine), address(collateralAsset), secondAmount);      borrower.addCollateral(address(creditLine), creditLineId, secondAmount, false);     uint256 collateralShares1 = IYield(collateralStrategy).getSharesForTokens(secondAmount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares.add(collateralShares1)); }  // Should have same amount of collateral tokens, after borrow operation function test_calculateTotalCollateralTokens_Borrow(uint128 _borrowAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  // Should have same amount of collateral tokens, after repayment operation function test_calculateTotalCollateralTokens_Repay(uint128 _repayAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  //----------------------- Credit line calculateTotalCollateralTokens, assert helper -----------------------//  function assert_calculateTotalCollateralTokens(uint256 _creditLineId, uint256 _collateralShares) public {     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);     uint256 calculatedCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     assertApproxEqRel(totalCollateral, calculatedCollateral, 1e14); }  //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//  // Current debt is zero, CCR = max(uint256) function test_calculateCurrentCollateralRatio_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(creditLineId);     assertEq(collateralRatio, type(uint256).max); }  // Should have non-zero collateral ratio immediately after principal is borrowed // If current debt is zero, CCR = max(uint256) function test_calculateCurrentCollateralRatio_Borrow(uint128 _borrowAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     assert_calculateCurrentCollateralRatio(creditLineId, collateralShares); }  // Should have non-zero collateral ratio after some amount is repaid function test_calculateCurrentCollateralRatio_Repay(uint128 _repayAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateCurrentCollateralRatio(creditLineId, collateralShares); }  //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//  function assert_calculateCurrentCollateralRatio(uint256 _creditLineId, uint256 _collateralShares) public {     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(_creditLineId);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     if (principal == 0) {         // After complete repayment         assertEq(collateralRatio, type(uint256).max);     } else {         calculatedCollateralRatio = totalCollateral.mul(_ratioOfPrices).div(10**_decimals).mul(SCALING_FACTOR).div(principal);         assertApproxEqRel(collateralRatio, calculatedCollateralRatio, 1e14);     } }  //----------------------- Credit line calculateBorrowableAmount tests -----------------------//  // Should have zero borrowable amount when collateral is not deposited function test_calculateBorrowableAmount() public {     uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);     assertEq(borrowableAmount, 0); }  // Should have some borrowable amount after collateral is deposited function test_calculateBorrowableAmount_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(creditLineId);     uint256 calculatedMaxPossible = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);     assertApproxEqRel(borrowableAmount, Math.min(requestData.borrowLimit, calculatedMaxPossible), 1e14); }  // Should have non-zero borrowable amount immediately after some amount is borrowed function test_calculateBorrowableAmount_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);      assert_calculateBorrowableAmount(creditLineId, collateralShares); }  // Should have zero borrowable amount immediately after all amount is borrowed function test_calculateBorrowableAmount_BorrowAll() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      assert_calculateBorrowableAmount(creditLineId, collateralShares); }  // Should have zero borrowable after some amount is repaid function test_calculateBorrowableAmount_Repay(     uint128 _borrowAmount,     uint128 _repayAmount,     uint128 _timeElapsed ) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      try borrower.repay(address(creditLine), creditLineId, repayAmount) {         assert_calculateBorrowableAmount(creditLineId, collateralShares);     } catch Error(string memory reason) {         assertEq(reason, 'SA:D2');     } }  //----------------------- Credit line calculateBorrowableAmount, assert help -----------------------//  function assert_calculateBorrowableAmount(uint256 _creditLineId, uint256 _collateralShares) public {     (, , , , collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 borrowableAmount = creditLine.calculateBorrowableAmount(_creditLineId);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     uint256 interestAccrued = creditLine.calculateInterestAccrued(_creditLineId);      uint256 maxBorrowableAmount = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);      if (maxBorrowableAmount &lt;= principal.add(interestAccrued).sub(totalInterestRepaid)) {         assertEq(borrowableAmount, 0);     } else {         assertApproxEqRel(             borrowableAmount,             Math.min(                 maxBorrowableAmount - principal.add(interestAccrued).sub(totalInterestRepaid),                 requestData.borrowLimit - principal             ),             1e14         );     } }  //----------------------- Credit line withdrawableCollateral tests -----------------------//  // Should have zero withdrawable collateral when collateral is not deposited function test_withdrawableCollateral() public {     uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);     assertEq(withdrawable, 0); }  // Should have withdrawable amount = collateral deposited, when no amount is borrowed function test_withdrawableCollateral_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);     assertApproxEqAbs(withdrawable, amount, 1); }  // Should have withdrawable amount &lt; collateral deposited, when some amount is borrowed function test_withdrawableCollateral_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_withdrawableCollateral(creditLineId); }  // Should have non-zero withdrawable collateral after some amount is repaid function test_withdrawableCollateral_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_withdrawableCollateral(creditLineId); }  //----------------------- Credit line withdrawableCollateral, assert helper -----------------------//  function assert_withdrawableCollateral(uint256 _creditLineId) public {     (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 withdrawable = creditLine.withdrawableCollateral(_creditLineId);     uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);     uint256 calculatedWithdrawable = currentDebt.mul(collateralRatio).div(_ratioOfPrices).mul(10**_decimals).div(SCALING_FACTOR);      if (calculatedWithdrawable &gt;= totalCollateral) {         // value more than total collateral tokens         assertEq(withdrawable, 0);     } else {         assertApproxEqRel(withdrawable, totalCollateral.sub(calculatedWithdrawable), 1e14);     } }  //----------------------- Credit line borrowTokensToLiquidate tests -----------------------//  // Should have zero borrowTokensToLiquidate when principal is not borrowed, after collateral is deposited function test_borrowTokensToLiquidate_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Toliquidate = creditLine.borrowTokensToLiquidate(creditLineId);     // current debt is 0, hence borrowTokens to liquidate is also 0     assertEq(Toliquidate, 0); }  // Should have non-zero borrowTokensToLiquidate immediately after principal is borrowed function test_borrowTokensToLiquidate_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_borrowTokensToLiquidate(creditLineId, collateralShares); }  // Should have non-zero borrowTokensToLiquidate after some amount is repaid function test_borrowTokensToLiquidate_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_borrowTokensToLiquidate(creditLineId, collateralShares); }  //----------------------- Credit line borrowTokensToLiquidate, assert helper -----------------------//  function assert_borrowTokensToLiquidate(uint256 _creditLineId, uint256 _collateralShares) public {     (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));     uint256 liquidatorRewardFraction = creditLine.liquidatorRewardFraction();     uint256 Toliquidate = creditLine.borrowTokensToLiquidate(_creditLineId);     uint256 debt = creditLine.calculateCurrentDebt(_creditLineId);     uint256 equivalentCollateral = (debt).mul(10**_decimals).div(_ratioOfPrices);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     if (equivalentCollateral &gt; totalCollateral) {         equivalentCollateral = totalCollateral;     }     uint256 borrowTokens = (equivalentCollateral.mul(uint256(SCALING_FACTOR).sub(liquidatorRewardFraction)).div(SCALING_FACTOR))         .mul(_ratioOfPrices)         .div(10**_decimals);     assertApproxEqRel(Toliquidate, borrowTokens, 1e14); }  } |
| **need_reflect** | False |
| **assistant_role_name** | Security Analyst |
| **user_role_name** | Solidity Programming Expert |
| **phase_prompt** | Given the user's task and the brainstorming ideas provided: Task: ""{task}"". Ideas: ""{ideas}"". As the {assistant_role}, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Handling Partial Withdrawals. There are two cases where the code may have Handling Partial Withdrawals vulnerabilities: 1. The contract assumes that the old strategy will have sufficient funds to fulfill the withdraw call for the full amount during migration. If the old strategy does not have enough funds, tokens could be left behind, leading to potential loss of funds or incomplete migration. 2. The contract should handle scenarios where only a partial amount can be withdrawn from the old strategy to ensure all funds are migrated properly. If you identify that the contract does not properly handle partial withdrawals during strategy migration, respond with: "" Handling Partial Withdrawals Identified."" For each vulnerability identified, use the following format: VULNERABILITY NAME or TYPE ''' DETAILED DESCRIPTION of the vulnerability, AND recommended mitigation/fix with no upgrade code ''' If you don't find any vulnerabilities, respond only with: "" NO Handling Partial Withdrawals."" |
| **phase_name** | PartialWithdrawalsDetector |
| **assistant_role_prompt** | {chatdev_prompt} You are Security Analyst. Now, we are both working at ChatDev and share a common interest in collaborating to successfully execute a marketing strategy for a new customer. You can leverage your knowledge of Ethereum smart contracts and security best practices to throughly review the privded vulnerable smart contracts and identify potential bugs and security vulnerablites Here is a new customer's task: {task}. To complete the task,  you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs. |
| **user_role_prompt** | {chatdev_prompt} You are Solidity Programming Expert. Now, we are both working at ChatDev and share a common interest in collaborating to successfully execute a marketing strategy for a new customer. You can analyze the code structure, logic, and implementation details of the contracts. You have extensive computing and coding experience in Solidity programming language. Here is a new customer's task: {task}. To complete the task,  you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs. |
| **chat_turn_limit** | 1 |
| **placeholders** | {'cycle_num': 1, 'modification_conclusion': '', 'cycle_index': 1, 'task': ""pragma solidity 0.7.6;\npragma abicoder v2;\n\nimport './Helpers/CLParent.sol';\nimport '../../PriceOracle.sol';\n\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\ncontract CreditLine_HelperFunctionTests is CLParent {\n    using SafeMath for uint256;\n\n    CreditLine creditLine;\n    PriceOracle priceOracle;\n\n    uint256 constant YEAR_IN_SECONDS = 365 days;\n    uint256 constant SCALING_FACTOR = 1e18;\n\n    uint256 public creditLineId;\n    address public borrowAssetStrategy;\n    address public collateralStrategy;\n    uint256 _ratioOfPrices;\n    uint256 _decimals;\n    uint256 calculatedInterest;\n    uint256 calculatedCollateralRatio;\n    uint256 borrowRate;\n    uint256 principal;\n    uint256 totalInterestRepaid;\n    uint256 collateralRatio;\n    uint256 collateralTokens;\n\n    function setUp() public virtual {\n        CLSetUp();\n\n        creditLine = CreditLine(creditLineAddress);\n        priceOracle = PriceOracle(priceOracleAddress);\n\n        (_ratioOfPrices, _decimals) = priceOracle.getLatestPrice(address(usdc), address(borrowAsset));\n\n        requestData.requestTo = address(lender);\n        // Borrow Asset equivalent of 1,000,000,000 in USD\n        requestData.borrowLimit = uint128(uint256(CLConstants.maxBorrowLimit / 1e6).mul(_ratioOfPrices).div(10_decimals));\n        requestData.borrowRate = CLConstants.maxBorrowRate / 1e18;\n        requestData.autoLiquidation = false;\n        requestData.collateralRatio = CLConstants.maxCollteralRatio / 1e18;\n        requestData.borrowAsset = address(borrowAsset);\n        requestData.borrowAssetStrategy = noYieldAddress;\n        requestData.collateralAsset = address(collateralAsset);\n        requestData.collateralStrategy = noYieldAddress;\n        requestData.requestAsLender = false;\n\n        creditLineId = goToActiveStage();\n\n        // Setting global parameters\n        borrowAssetStrategy = requestData.borrowAssetStrategy;\n        collateralStrategy = requestData.collateralStrategy;\n    }\n\n    //----------------------- Credit line calculateInterest tests -----------------------//\n\n    // Should have zero interest when principal is not borrowed, after collateral is deposited\n    function test_calculateInterest_DepositCollateral() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = 10 days;\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        // Time travel by 10 days\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        // Interest after depositing collateral should be zero\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);\n\n        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);\n        assertEq(currentInterest, 0);\n    }\n\n    // Should have non-zero interest after principal is borrowed\n    function test_calculateInterest_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculatedInterest(creditLineId, timeElapsed);\n    }\n\n    // Should have non-zero interest after some amount is repaid and zero after entire amount is repaid\n    function test_calculateInterest_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n        _increaseBlock(block.timestamp + 10 days);\n\n        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);\n        uint256 repayAmount = scaleToRange256(_repayAmount, currentDebt.sub(Borrowable).add(1), currentDebt);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        assert_calculatedInterest(creditLineId, timeElapsed);\n\n        _increaseBlock(block.timestamp + 10 days);\n\n        uint256 remainingDebt = creditLine.calculateCurrentDebt(creditLineId);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), remainingDebt);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), remainingDebt);\n\n        borrower.repay(address(creditLine), creditLineId, remainingDebt);\n\n        // Interest after repaying entire credit line should be zero\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);\n\n        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);\n        assertEq(currentInterest, 0);\n    }\n\n    //----------------------- Credit line calculateInterest, assert helper -----------------------//\n\n    function assert_calculatedInterest(uint256 _creditLineId, uint256 _timeElapsed) public {\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);\n\n        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, _timeElapsed).div(SCALING_FACTOR);\n        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed).div(SCALING_FACTOR).div(YEAR_IN_SECONDS);\n        assertEq(currentInterest, calculatedInterest);\n    }\n\n    //----------------------- Credit line calculateInterestAccrued tests -----------------------//\n\n    // Should have zero interest when principal is not borrowed, after collateral is deposited\n    function test_calculateInterestAccrued_DepositCollateral() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = 10 days;\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);\n        assertEq(currentInterest, 0);\n    }\n\n    // Should have non-zero interest after principal is borrowed\n    function test_calculateInterestAccrued_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculateInterestAccrued(creditLineId, timeElapsed);\n    }\n\n    // Should have non-zero interest after some amount is repaid\n    function test_calculateInterestAccrued_noPrincipal_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        uint256 interest = creditLine.calculateInterestAccrued(creditLineId);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, interest);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        assert_calculateInterestAccrued(creditLineId, timeElapsed);\n    }\n\n    //----------------------- Credit line calculateInterestAccrued, assert helper -----------------------//\n\n    function assert_calculateInterestAccrued(uint256 _creditLineId, uint256 _timeElapsed) public {\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);\n\n        uint256 currentInterest = creditLine.calculateInterestAccrued(_creditLineId);\n        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);\n        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {\n            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;\n        } else {\n            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);\n        }\n        assertEq(currentInterest, calculatedInterest);\n    }\n\n    //----------------------- Credit line calculateCurrentDebt tests -----------------------//\n\n    // Should have zero debt when principal is not borrowed, after collateral is deposited\n    function test_calculateCurrentDebt_DepositCollateral() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = 10 days;\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);\n        assertEq(currentDebt, 0);\n    }\n\n    // Should have non-zero debt immediately after principal is borrowed\n    function test_calculateCurrentDebt_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculateCurrentDebt(creditLineId, timeElapsed);\n    }\n\n    // Should have less debt after some amount is repaid\n    function test_calculateCurrentDebt_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, currentDebt);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);\n        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);\n\n        currentDebt = creditLine.calculateCurrentDebt(creditLineId);\n        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);\n        assertEq(currentDebt, currentInterest.add(principal).sub(totalInterestRepaid));\n    }\n\n    //----------------------- Credit line calculateCurrentDebt, assert helper -----------------------//\n\n    function assert_calculateCurrentDebt(uint256 _creditLineId, uint256 _timeElapsed) public {\n        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);\n\n        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);\n        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);\n        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {\n            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;\n        } else {\n            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);\n        }\n        assertEq(currentDebt, calculatedInterest.add(principal));\n    }\n\n    //----------------------- Credit line calculateTotalCollateralTokens tests -----------------------//\n\n    // Should have same amount of collateral tokens, after addCollateral operation\n    function test_calculateTotalCollateralTokens_DepositCollateral(uint128 _amount) public {\n        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());\n        uint256 timeElapsed = 10 days;\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);\n    }\n\n    // Should have same amount of collateral tokens, after addCollateral operation\n    function test_calculateTotalCollateralTokens_DepositCollateralTwice(uint128 _amount, uint128 _secondAmount) public {\n        uint256 maxAmount = collateralAsset.totalSupply();\n        uint256 amount = scaleToRange256(_amount, 1, maxAmount.div(3));\n        uint256 secondAmount = scaleToRange256(_secondAmount, 1, maxAmount.div(3));\n        uint256 timeElapsed = 5 days;\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);\n\n        // Adding collateral again\n        admin.transferToken(address(collateralAsset), address(borrower), secondAmount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), secondAmount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, secondAmount, false);\n        uint256 collateralShares1 = IYield(collateralStrategy).getSharesForTokens(secondAmount, address(collateralAsset));\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_calculateTotalCollateralTokens(creditLineId, collateralShares.add(collateralShares1));\n    }\n\n    // Should have same amount of collateral tokens, after borrow operation\n    function test_calculateTotalCollateralTokens_Borrow(uint128 _borrowAmount) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);\n    }\n\n    // Should have same amount of collateral tokens, after repayment operation\n    function test_calculateTotalCollateralTokens_Repay(uint128 _repayAmount) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);\n    }\n\n    //----------------------- Credit line calculateTotalCollateralTokens, assert helper -----------------------//\n\n    function assert_calculateTotalCollateralTokens(uint256 _creditLineId, uint256 _collateralShares) public {\n        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);\n        uint256 calculatedCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));\n        assertApproxEqRel(totalCollateral, calculatedCollateral, 1e14);\n    }\n\n    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//\n\n    // Current debt is zero, CCR = max(uint256)\n    function test_calculateCurrentCollateralRatio_DepositCollateral() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(creditLineId);\n        assertEq(collateralRatio, type(uint256).max);\n    }\n\n    // Should have non-zero collateral ratio immediately after principal is borrowed\n    // If current debt is zero, CCR = max(uint256)\n    function test_calculateCurrentCollateralRatio_Borrow(uint128 _borrowAmount) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);\n    }\n\n    // Should have non-zero collateral ratio after some amount is repaid\n    function test_calculateCurrentCollateralRatio_Repay(uint128 _repayAmount) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);\n    }\n\n    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//\n\n    function assert_calculateCurrentCollateralRatio(uint256 _creditLineId, uint256 _collateralShares) public {\n        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);\n\n        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));\n\n        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(_creditLineId);\n        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));\n        if (principal == 0) {\n            // After complete repayment\n            assertEq(collateralRatio, type(uint256).max);\n        } else {\n            calculatedCollateralRatio = totalCollateral.mul(_ratioOfPrices).div(10_decimals).mul(SCALING_FACTOR).div(principal);\n            assertApproxEqRel(collateralRatio, calculatedCollateralRatio, 1e14);\n        }\n    }\n\n    //----------------------- Credit line calculateBorrowableAmount tests -----------------------//\n\n    // Should have zero borrowable amount when collateral is not deposited\n    function test_calculateBorrowableAmount() public {\n        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);\n        assertEq(borrowableAmount, 0);\n    }\n\n    // Should have some borrowable amount after collateral is deposited\n    function test_calculateBorrowableAmount_DepositCollateral(uint128 _amount) public {\n        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);\n\n        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));\n\n        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(creditLineId);\n        uint256 calculatedMaxPossible = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10_decimals);\n        assertApproxEqRel(borrowableAmount, Math.min(requestData.borrowLimit, calculatedMaxPossible), 1e14);\n    }\n\n    // Should have non-zero borrowable amount immediately after some amount is borrowed\n    function test_calculateBorrowableAmount_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        assert_calculateBorrowableAmount(creditLineId, collateralShares);\n    }\n\n    // Should have zero borrowable amount immediately after all amount is borrowed\n    function test_calculateBorrowableAmount_BorrowAll() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        assert_calculateBorrowableAmount(creditLineId, collateralShares);\n    }\n\n    // Should have zero borrowable after some amount is repaid\n    function test_calculateBorrowableAmount_Repay(\n        uint128 _borrowAmount,\n        uint128 _repayAmount,\n        uint128 _timeElapsed\n    ) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        try borrower.repay(address(creditLine), creditLineId, repayAmount) {\n            assert_calculateBorrowableAmount(creditLineId, collateralShares);\n        } catch Error(string memory reason) {\n            assertEq(reason, 'SA:D2');\n        }\n    }\n\n    //----------------------- Credit line calculateBorrowableAmount, assert help -----------------------//\n\n    function assert_calculateBorrowableAmount(uint256 _creditLineId, uint256 _collateralShares) public {\n        (, , , , collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);\n        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);\n\n        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));\n\n        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(_creditLineId);\n        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));\n        uint256 interestAccrued = creditLine.calculateInterestAccrued(_creditLineId);\n\n        uint256 maxBorrowableAmount = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10_decimals);\n\n        if (maxBorrowableAmount &lt;= principal.add(interestAccrued).sub(totalInterestRepaid)) {\n            assertEq(borrowableAmount, 0);\n        } else {\n            assertApproxEqRel(\n                borrowableAmount,\n                Math.min(\n                    maxBorrowableAmount - principal.add(interestAccrued).sub(totalInterestRepaid),\n                    requestData.borrowLimit - principal\n                ),\n                1e14\n            );\n        }\n    }\n\n    //----------------------- Credit line withdrawableCollateral tests -----------------------//\n\n    // Should have zero withdrawable collateral when collateral is not deposited\n    function test_withdrawableCollateral() public {\n        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);\n        assertEq(withdrawable, 0);\n    }\n\n    // Should have withdrawable amount = collateral deposited, when no amount is borrowed\n    function test_withdrawableCollateral_DepositCollateral(uint128 _amount) public {\n        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);\n        assertApproxEqAbs(withdrawable, amount, 1);\n    }\n\n    // Should have withdrawable amount &lt; collateral deposited, when some amount is borrowed\n    function test_withdrawableCollateral_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_withdrawableCollateral(creditLineId);\n    }\n\n    // Should have non-zero withdrawable collateral after some amount is repaid\n    function test_withdrawableCollateral_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_withdrawableCollateral(creditLineId);\n    }\n\n    //----------------------- Credit line withdrawableCollateral, assert helper -----------------------//\n\n    function assert_withdrawableCollateral(uint256 _creditLineId) public {\n        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);\n        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);\n\n        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));\n\n        uint256 withdrawable = creditLine.withdrawableCollateral(_creditLineId);\n        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);\n        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);\n        uint256 calculatedWithdrawable = currentDebt.mul(collateralRatio).div(_ratioOfPrices).mul(10_decimals).div(SCALING_FACTOR);\n\n        if (calculatedWithdrawable &gt;= totalCollateral) {\n            // value more than total collateral tokens\n            assertEq(withdrawable, 0);\n        } else {\n            assertApproxEqRel(withdrawable, totalCollateral.sub(calculatedWithdrawable), 1e14);\n        }\n    }\n\n    //----------------------- Credit line borrowTokensToLiquidate tests -----------------------//\n\n    // Should have zero borrowTokensToLiquidate when principal is not borrowed, after collateral is deposited\n    function test_borrowTokensToLiquidate_DepositCollateral() public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n\n        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(creditLineId);\n        // current debt is 0, hence borrowTokens to liquidate is also 0\n        assertEq(Toliquidate, 0);\n    }\n\n    // Should have non-zero borrowTokensToLiquidate immediately after principal is borrowed\n    function test_borrowTokensToLiquidate_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);\n\n        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);\n        _increaseBlock(block.timestamp + timeElapsed);\n        assert_borrowTokensToLiquidate(creditLineId, collateralShares);\n    }\n\n    // Should have non-zero borrowTokensToLiquidate after some amount is repaid\n    function test_borrowTokensToLiquidate_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {\n        uint256 amount = 100 * 10ERC20(address(collateralAsset)).decimals();\n        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);\n        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());\n        admin.transferToken(address(collateralAsset), address(borrower), amount);\n        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);\n\n        borrower.addCollateral(address(creditLine), creditLineId, amount, false);\n        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));\n        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);\n\n        // Adding tokens to lender and depositing to lender's savings Account\n        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);\n\n        borrower.borrow(address(creditLine), creditLineId, Borrowable);\n\n        _increaseBlock(block.timestamp + timeElapsed);\n\n        // Adding tokens to borrower and setting allowance for creditline contract\n        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);\n        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);\n\n        borrower.repay(address(creditLine), creditLineId, repayAmount);\n        assert_borrowTokensToLiquidate(creditLineId, collateralShares);\n    }\n\n    //----------------------- Credit line borrowTokensToLiquidate, assert helper -----------------------//\n\n    function assert_borrowTokensToLiquidate(uint256 _creditLineId, uint256 _collateralShares) public {\n        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));\n        uint256 liquidatorRewardFraction = creditLine.liquidatorRewardFraction();\n        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(_creditLineId);\n        uint256 debt = creditLine.calculateCurrentDebt(_creditLineId);\n        uint256 equivalentCollateral = (debt).mul(10_decimals).div(_ratioOfPrices);\n        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));\n        if (equivalentCollateral &gt; totalCollateral) {\n            equivalentCollateral = totalCollateral;\n        }\n        uint256 borrowTokens = (equivalentCollateral.mul(uint256(SCALING_FACTOR).sub(liquidatorRewardFraction)).div(SCALING_FACTOR))\n            .mul(_ratioOfPrices)\n            .div(10**_decimals);\n        assertApproxEqRel(Toliquidate, borrowTokens, 1e14);\n    }\n}\n"", 'ideas': "" Inconsistent Base Tokens Identified.\n\n\nINCONSISTENT BASE TOKENS\n'''\nThe contract does not verify that both the old and new strategies use the same base token during migration. This lack of verification can lead to scenarios where the new strategy accepts a different base token than what was previously used. As a result, tokens received during migration may not be recognized by the contract, leading to potential loss of funds.\n\nTo mitigate this vulnerability, it is essential to implement a check during the migration process that verifies the base token of the new strategy matches that of the old strategy. This can be done by adding a function that compares the base tokens of both strategies before allowing the migration to proceed. If the tokens do not match, the migration should be reverted, ensuring that funds remain accessible and secure.\n'''\n""} |
| **memory** | No existed memory |
| **model_type** | ModelType.GPT_4_O_MINI |

[2024-12-08 16:42:01 INFO] System: **[RolePlaying]**

| Parameter | Value |
| --- | --- |
| **assistant_role_name** | Security Analyst |
| **user_role_name** | Solidity Programming Expert |
| **assistant_role_prompt** | {chatdev_prompt} You are Security Analyst. Now, we are both working at ChatDev and share a common interest in collaborating to successfully execute a marketing strategy for a new customer. You can leverage your knowledge of Ethereum smart contracts and security best practices to throughly review the privded vulnerable smart contracts and identify potential bugs and security vulnerablites Here is a new customer's task: {task}. To complete the task,  you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs. |
| **user_role_prompt** | {chatdev_prompt} You are Solidity Programming Expert. Now, we are both working at ChatDev and share a common interest in collaborating to successfully execute a marketing strategy for a new customer. You can analyze the code structure, logic, and implementation details of the contracts. You have extensive computing and coding experience in Solidity programming language. Here is a new customer's task: {task}. To complete the task,  you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs. |
| **task_prompt** | pragma solidity 0.7.6; pragma abicoder v2; import './Helpers/CLParent.sol'; import '../../PriceOracle.sol'; import '@openzeppelin/contracts/math/SafeMath.sol'; contract CreditLine_HelperFunctionTests is CLParent {     using SafeMath for uint256; CreditLine creditLine; PriceOracle priceOracle;  uint256 constant YEAR_IN_SECONDS = 365 days; uint256 constant SCALING_FACTOR = 1e18;  uint256 public creditLineId; address public borrowAssetStrategy; address public collateralStrategy; uint256 _ratioOfPrices; uint256 _decimals; uint256 calculatedInterest; uint256 calculatedCollateralRatio; uint256 borrowRate; uint256 principal; uint256 totalInterestRepaid; uint256 collateralRatio; uint256 collateralTokens;  function setUp() public virtual {     CLSetUp();      creditLine = CreditLine(creditLineAddress);     priceOracle = PriceOracle(priceOracleAddress);      (_ratioOfPrices, _decimals) = priceOracle.getLatestPrice(address(usdc), address(borrowAsset));      requestData.requestTo = address(lender);     // Borrow Asset equivalent of 1,000,000,000 in USD     requestData.borrowLimit = uint128(uint256(CLConstants.maxBorrowLimit / 1e6).mul(_ratioOfPrices).div(10**_decimals));     requestData.borrowRate = CLConstants.maxBorrowRate / 1e18;     requestData.autoLiquidation = false;     requestData.collateralRatio = CLConstants.maxCollteralRatio / 1e18;     requestData.borrowAsset = address(borrowAsset);     requestData.borrowAssetStrategy = noYieldAddress;     requestData.collateralAsset = address(collateralAsset);     requestData.collateralStrategy = noYieldAddress;     requestData.requestAsLender = false;      creditLineId = goToActiveStage();      // Setting global parameters     borrowAssetStrategy = requestData.borrowAssetStrategy;     collateralStrategy = requestData.collateralStrategy; }  //----------------------- Credit line calculateInterest tests -----------------------//  // Should have zero interest when principal is not borrowed, after collateral is deposited function test_calculateInterest_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      // Time travel by 10 days     _increaseBlock(block.timestamp + timeElapsed);      // Interest after depositing collateral should be zero     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);     assertEq(currentInterest, 0); }  // Should have non-zero interest after principal is borrowed function test_calculateInterest_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_calculatedInterest(creditLineId, timeElapsed); }  // Should have non-zero interest after some amount is repaid and zero after entire amount is repaid function test_calculateInterest_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);     _increaseBlock(block.timestamp + 10 days);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, currentDebt.sub(Borrowable).add(1), currentDebt);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculatedInterest(creditLineId, timeElapsed);      _increaseBlock(block.timestamp + 10 days);      uint256 remainingDebt = creditLine.calculateCurrentDebt(creditLineId);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), remainingDebt);     borrower.setAllowance(address(creditLine), address(borrowAsset), remainingDebt);      borrower.repay(address(creditLine), creditLineId, remainingDebt);      // Interest after repaying entire credit line should be zero     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);     assertEq(currentInterest, 0); }  //----------------------- Credit line calculateInterest, assert helper -----------------------//  function assert_calculatedInterest(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, _timeElapsed).div(SCALING_FACTOR);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed).div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     assertEq(currentInterest, calculatedInterest); }  //----------------------- Credit line calculateInterestAccrued tests -----------------------//  // Should have zero interest when principal is not borrowed, after collateral is deposited function test_calculateInterestAccrued_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     _increaseBlock(block.timestamp + timeElapsed);      uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);     assertEq(currentInterest, 0); }  // Should have non-zero interest after principal is borrowed function test_calculateInterestAccrued_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateInterestAccrued(creditLineId, timeElapsed); }  // Should have non-zero interest after some amount is repaid function test_calculateInterestAccrued_noPrincipal_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      uint256 interest = creditLine.calculateInterestAccrued(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, interest);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateInterestAccrued(creditLineId, timeElapsed); }  //----------------------- Credit line calculateInterestAccrued, assert helper -----------------------//  function assert_calculateInterestAccrued(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentInterest = creditLine.calculateInterestAccrued(_creditLineId);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);     if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;     } else {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     }     assertEq(currentInterest, calculatedInterest); }  //----------------------- Credit line calculateCurrentDebt tests -----------------------//  // Should have zero debt when principal is not borrowed, after collateral is deposited function test_calculateCurrentDebt_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = 10 days;      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     _increaseBlock(block.timestamp + timeElapsed);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     assertEq(currentDebt, 0); }  // Should have non-zero debt immediately after principal is borrowed function test_calculateCurrentDebt_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);      _increaseBlock(block.timestamp + timeElapsed);     assert_calculateCurrentDebt(creditLineId, timeElapsed); }  // Should have less debt after some amount is repaid function test_calculateCurrentDebt_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, currentDebt);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);      currentDebt = creditLine.calculateCurrentDebt(creditLineId);     uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);     assertEq(currentDebt, currentInterest.add(principal).sub(totalInterestRepaid)); }  //----------------------- Credit line calculateCurrentDebt, assert helper -----------------------//  function assert_calculateCurrentDebt(uint256 _creditLineId, uint256 _timeElapsed) public {     (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);     calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);     if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;     } else {         calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);     }     assertEq(currentDebt, calculatedInterest.add(principal)); }  //----------------------- Credit line calculateTotalCollateralTokens tests -----------------------//  // Should have same amount of collateral tokens, after addCollateral operation function test_calculateTotalCollateralTokens_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     uint256 timeElapsed = 10 days;     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  // Should have same amount of collateral tokens, after addCollateral operation function test_calculateTotalCollateralTokens_DepositCollateralTwice(uint128 _amount, uint128 _secondAmount) public {     uint256 maxAmount = collateralAsset.totalSupply();     uint256 amount = scaleToRange256(_amount, 1, maxAmount.div(3));     uint256 secondAmount = scaleToRange256(_secondAmount, 1, maxAmount.div(3));     uint256 timeElapsed = 5 days;     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares);      // Adding collateral again     admin.transferToken(address(collateralAsset), address(borrower), secondAmount);     borrower.setAllowance(address(creditLine), address(collateralAsset), secondAmount);      borrower.addCollateral(address(creditLine), creditLineId, secondAmount, false);     uint256 collateralShares1 = IYield(collateralStrategy).getSharesForTokens(secondAmount, address(collateralAsset));     _increaseBlock(block.timestamp + timeElapsed);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares.add(collateralShares1)); }  // Should have same amount of collateral tokens, after borrow operation function test_calculateTotalCollateralTokens_Borrow(uint128 _borrowAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  // Should have same amount of collateral tokens, after repayment operation function test_calculateTotalCollateralTokens_Repay(uint128 _repayAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateTotalCollateralTokens(creditLineId, collateralShares); }  //----------------------- Credit line calculateTotalCollateralTokens, assert helper -----------------------//  function assert_calculateTotalCollateralTokens(uint256 _creditLineId, uint256 _collateralShares) public {     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);     uint256 calculatedCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     assertApproxEqRel(totalCollateral, calculatedCollateral, 1e14); }  //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//  // Current debt is zero, CCR = max(uint256) function test_calculateCurrentCollateralRatio_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(creditLineId);     assertEq(collateralRatio, type(uint256).max); }  // Should have non-zero collateral ratio immediately after principal is borrowed // If current debt is zero, CCR = max(uint256) function test_calculateCurrentCollateralRatio_Borrow(uint128 _borrowAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     assert_calculateCurrentCollateralRatio(creditLineId, collateralShares); }  // Should have non-zero collateral ratio after some amount is repaid function test_calculateCurrentCollateralRatio_Repay(uint128 _repayAmount) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();      admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_calculateCurrentCollateralRatio(creditLineId, collateralShares); }  //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//  function assert_calculateCurrentCollateralRatio(uint256 _creditLineId, uint256 _collateralShares) public {     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(_creditLineId);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     if (principal == 0) {         // After complete repayment         assertEq(collateralRatio, type(uint256).max);     } else {         calculatedCollateralRatio = totalCollateral.mul(_ratioOfPrices).div(10**_decimals).mul(SCALING_FACTOR).div(principal);         assertApproxEqRel(collateralRatio, calculatedCollateralRatio, 1e14);     } }  //----------------------- Credit line calculateBorrowableAmount tests -----------------------//  // Should have zero borrowable amount when collateral is not deposited function test_calculateBorrowableAmount() public {     uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);     assertEq(borrowableAmount, 0); }  // Should have some borrowable amount after collateral is deposited function test_calculateBorrowableAmount_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(creditLineId);     uint256 calculatedMaxPossible = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);     assertApproxEqRel(borrowableAmount, Math.min(requestData.borrowLimit, calculatedMaxPossible), 1e14); }  // Should have non-zero borrowable amount immediately after some amount is borrowed function test_calculateBorrowableAmount_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);      assert_calculateBorrowableAmount(creditLineId, collateralShares); }  // Should have zero borrowable amount immediately after all amount is borrowed function test_calculateBorrowableAmount_BorrowAll() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      assert_calculateBorrowableAmount(creditLineId, collateralShares); }  // Should have zero borrowable after some amount is repaid function test_calculateBorrowableAmount_Repay(     uint128 _borrowAmount,     uint128 _repayAmount,     uint128 _timeElapsed ) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      try borrower.repay(address(creditLine), creditLineId, repayAmount) {         assert_calculateBorrowableAmount(creditLineId, collateralShares);     } catch Error(string memory reason) {         assertEq(reason, 'SA:D2');     } }  //----------------------- Credit line calculateBorrowableAmount, assert help -----------------------//  function assert_calculateBorrowableAmount(uint256 _creditLineId, uint256 _collateralShares) public {     (, , , , collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 borrowableAmount = creditLine.calculateBorrowableAmount(_creditLineId);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     uint256 interestAccrued = creditLine.calculateInterestAccrued(_creditLineId);      uint256 maxBorrowableAmount = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);      if (maxBorrowableAmount &lt;= principal.add(interestAccrued).sub(totalInterestRepaid)) {         assertEq(borrowableAmount, 0);     } else {         assertApproxEqRel(             borrowableAmount,             Math.min(                 maxBorrowableAmount - principal.add(interestAccrued).sub(totalInterestRepaid),                 requestData.borrowLimit - principal             ),             1e14         );     } }  //----------------------- Credit line withdrawableCollateral tests -----------------------//  // Should have zero withdrawable collateral when collateral is not deposited function test_withdrawableCollateral() public {     uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);     assertEq(withdrawable, 0); }  // Should have withdrawable amount = collateral deposited, when no amount is borrowed function test_withdrawableCollateral_DepositCollateral(uint128 _amount) public {     uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);     assertApproxEqAbs(withdrawable, amount, 1); }  // Should have withdrawable amount &lt; collateral deposited, when some amount is borrowed function test_withdrawableCollateral_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_withdrawableCollateral(creditLineId); }  // Should have non-zero withdrawable collateral after some amount is repaid function test_withdrawableCollateral_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_withdrawableCollateral(creditLineId); }  //----------------------- Credit line withdrawableCollateral, assert helper -----------------------//  function assert_withdrawableCollateral(uint256 _creditLineId) public {     (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);     (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);      (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));      uint256 withdrawable = creditLine.withdrawableCollateral(_creditLineId);     uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);     uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);     uint256 calculatedWithdrawable = currentDebt.mul(collateralRatio).div(_ratioOfPrices).mul(10**_decimals).div(SCALING_FACTOR);      if (calculatedWithdrawable &gt;= totalCollateral) {         // value more than total collateral tokens         assertEq(withdrawable, 0);     } else {         assertApproxEqRel(withdrawable, totalCollateral.sub(calculatedWithdrawable), 1e14);     } }  //----------------------- Credit line borrowTokensToLiquidate tests -----------------------//  // Should have zero borrowTokensToLiquidate when principal is not borrowed, after collateral is deposited function test_borrowTokensToLiquidate_DepositCollateral() public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);      uint256 Toliquidate = creditLine.borrowTokensToLiquidate(creditLineId);     // current debt is 0, hence borrowTokens to liquidate is also 0     assertEq(Toliquidate, 0); }  // Should have non-zero borrowTokensToLiquidate immediately after principal is borrowed function test_borrowTokensToLiquidate_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));      uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);     uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);     // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);      borrower.borrow(address(creditLine), creditLineId, BorrowAmount);     _increaseBlock(block.timestamp + timeElapsed);     assert_borrowTokensToLiquidate(creditLineId, collateralShares); }  // Should have non-zero borrowTokensToLiquidate after some amount is repaid function test_borrowTokensToLiquidate_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {     uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();     uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);     uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());     admin.transferToken(address(collateralAsset), address(borrower), amount);     borrower.setAllowance(address(creditLine), address(collateralAsset), amount);      borrower.addCollateral(address(creditLine), creditLineId, amount, false);     uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));     uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);      // Adding tokens to lender and depositing to lender's savings Account     savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);      borrower.borrow(address(creditLine), creditLineId, Borrowable);      _increaseBlock(block.timestamp + timeElapsed);      // Adding tokens to borrower and setting allowance for creditline contract     admin.transferToken(address(borrowAsset), address(borrower), repayAmount);     borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);      borrower.repay(address(creditLine), creditLineId, repayAmount);     assert_borrowTokensToLiquidate(creditLineId, collateralShares); }  //----------------------- Credit line borrowTokensToLiquidate, assert helper -----------------------//  function assert_borrowTokensToLiquidate(uint256 _creditLineId, uint256 _collateralShares) public {     (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));     uint256 liquidatorRewardFraction = creditLine.liquidatorRewardFraction();     uint256 Toliquidate = creditLine.borrowTokensToLiquidate(_creditLineId);     uint256 debt = creditLine.calculateCurrentDebt(_creditLineId);     uint256 equivalentCollateral = (debt).mul(10**_decimals).div(_ratioOfPrices);     uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));     if (equivalentCollateral &gt; totalCollateral) {         equivalentCollateral = totalCollateral;     }     uint256 borrowTokens = (equivalentCollateral.mul(uint256(SCALING_FACTOR).sub(liquidatorRewardFraction)).div(SCALING_FACTOR))         .mul(_ratioOfPrices)         .div(10**_decimals);     assertApproxEqRel(Toliquidate, borrowTokens, 1e14); }  } |
| **with_task_specify** | False |
| **memory** | No existed memory |
| **model_type** | ModelType.GPT_4_O_MINI |
| **background_prompt** | We are a specialized team that audits Solidity smart contracts using an advanced multi-agent system. Our approach combines the expertise of project management, smart contract counseling, auditing, and Solidity programming to deliver comprehensive and reliable contract assessments. |

[2024-12-08 16:42:01 INFO] Solidity Programming Expert: **[Start Chat]**

[We are a specialized team that audits Solidity smart contracts using an advanced multi-agent system. Our approach combines the expertise of project management, smart contract counseling, auditing, and Solidity programming to deliver comprehensive and reliable contract assessments.
You are Security Analyst. Now, we are both working at ChatDev and share a common interest in collaborating to successfully execute a marketing strategy for a new customer.
You can leverage your knowledge of Ethereum smart contracts and security best practices to throughly review the privded vulnerable smart contracts and identify potential bugs and security vulnerablites
Here is a new customer's task: pragma solidity 0.7.6;
pragma abicoder v2;

import './Helpers/CLParent.sol';
import '../../PriceOracle.sol';

import '@openzeppelin/contracts/math/SafeMath.sol';

contract CreditLine_HelperFunctionTests is CLParent {
    using SafeMath for uint256;

    CreditLine creditLine;
    PriceOracle priceOracle;

    uint256 constant YEAR_IN_SECONDS = 365 days;
    uint256 constant SCALING_FACTOR = 1e18;

    uint256 public creditLineId;
    address public borrowAssetStrategy;
    address public collateralStrategy;
    uint256 _ratioOfPrices;
    uint256 _decimals;
    uint256 calculatedInterest;
    uint256 calculatedCollateralRatio;
    uint256 borrowRate;
    uint256 principal;
    uint256 totalInterestRepaid;
    uint256 collateralRatio;
    uint256 collateralTokens;

    function setUp() public virtual {
        CLSetUp();

        creditLine = CreditLine(creditLineAddress);
        priceOracle = PriceOracle(priceOracleAddress);

        (_ratioOfPrices, _decimals) = priceOracle.getLatestPrice(address(usdc), address(borrowAsset));

        requestData.requestTo = address(lender);
        // Borrow Asset equivalent of 1,000,000,000 in USD
        requestData.borrowLimit = uint128(uint256(CLConstants.maxBorrowLimit / 1e6).mul(_ratioOfPrices).div(10**_decimals));
        requestData.borrowRate = CLConstants.maxBorrowRate / 1e18;
        requestData.autoLiquidation = false;
        requestData.collateralRatio = CLConstants.maxCollteralRatio / 1e18;
        requestData.borrowAsset = address(borrowAsset);
        requestData.borrowAssetStrategy = noYieldAddress;
        requestData.collateralAsset = address(collateralAsset);
        requestData.collateralStrategy = noYieldAddress;
        requestData.requestAsLender = false;

        creditLineId = goToActiveStage();

        // Setting global parameters
        borrowAssetStrategy = requestData.borrowAssetStrategy;
        collateralStrategy = requestData.collateralStrategy;
    }

    //----------------------- Credit line calculateInterest tests -----------------------//

    // Should have zero interest when principal is not borrowed, after collateral is deposited
    function test_calculateInterest_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        // Time travel by 10 days
        _increaseBlock(block.timestamp + timeElapsed);

        // Interest after depositing collateral should be zero
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);
        assertEq(currentInterest, 0);
    }

    // Should have non-zero interest after principal is borrowed
    function test_calculateInterest_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculatedInterest(creditLineId, timeElapsed);
    }

    // Should have non-zero interest after some amount is repaid and zero after entire amount is repaid
    function test_calculateInterest_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);
        _increaseBlock(block.timestamp + 10 days);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, currentDebt.sub(Borrowable).add(1), currentDebt);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculatedInterest(creditLineId, timeElapsed);

        _increaseBlock(block.timestamp + 10 days);

        uint256 remainingDebt = creditLine.calculateCurrentDebt(creditLineId);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), remainingDebt);
        borrower.setAllowance(address(creditLine), address(borrowAsset), remainingDebt);

        borrower.repay(address(creditLine), creditLineId, remainingDebt);

        // Interest after repaying entire credit line should be zero
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);
        assertEq(currentInterest, 0);
    }

    //----------------------- Credit line calculateInterest, assert helper -----------------------//

    function assert_calculatedInterest(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, _timeElapsed).div(SCALING_FACTOR);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed).div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        assertEq(currentInterest, calculatedInterest);
    }

    //----------------------- Credit line calculateInterestAccrued tests -----------------------//

    // Should have zero interest when principal is not borrowed, after collateral is deposited
    function test_calculateInterestAccrued_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);
        assertEq(currentInterest, 0);
    }

    // Should have non-zero interest after principal is borrowed
    function test_calculateInterestAccrued_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateInterestAccrued(creditLineId, timeElapsed);
    }

    // Should have non-zero interest after some amount is repaid
    function test_calculateInterestAccrued_noPrincipal_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        uint256 interest = creditLine.calculateInterestAccrued(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, interest);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateInterestAccrued(creditLineId, timeElapsed);
    }

    //----------------------- Credit line calculateInterestAccrued, assert helper -----------------------//

    function assert_calculateInterestAccrued(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentInterest = creditLine.calculateInterestAccrued(_creditLineId);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);
        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;
        } else {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        }
        assertEq(currentInterest, calculatedInterest);
    }

    //----------------------- Credit line calculateCurrentDebt tests -----------------------//

    // Should have zero debt when principal is not borrowed, after collateral is deposited
    function test_calculateCurrentDebt_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        assertEq(currentDebt, 0);
    }

    // Should have non-zero debt immediately after principal is borrowed
    function test_calculateCurrentDebt_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);

        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateCurrentDebt(creditLineId, timeElapsed);
    }

    // Should have less debt after some amount is repaid
    function test_calculateCurrentDebt_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, currentDebt);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);

        currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);
        assertEq(currentDebt, currentInterest.add(principal).sub(totalInterestRepaid));
    }

    //----------------------- Credit line calculateCurrentDebt, assert helper -----------------------//

    function assert_calculateCurrentDebt(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);
        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;
        } else {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        }
        assertEq(currentDebt, calculatedInterest.add(principal));
    }

    //----------------------- Credit line calculateTotalCollateralTokens tests -----------------------//

    // Should have same amount of collateral tokens, after addCollateral operation
    function test_calculateTotalCollateralTokens_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        uint256 timeElapsed = 10 days;
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    // Should have same amount of collateral tokens, after addCollateral operation
    function test_calculateTotalCollateralTokens_DepositCollateralTwice(uint128 _amount, uint128 _secondAmount) public {
        uint256 maxAmount = collateralAsset.totalSupply();
        uint256 amount = scaleToRange256(_amount, 1, maxAmount.div(3));
        uint256 secondAmount = scaleToRange256(_secondAmount, 1, maxAmount.div(3));
        uint256 timeElapsed = 5 days;
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);

        // Adding collateral again
        admin.transferToken(address(collateralAsset), address(borrower), secondAmount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), secondAmount);

        borrower.addCollateral(address(creditLine), creditLineId, secondAmount, false);
        uint256 collateralShares1 = IYield(collateralStrategy).getSharesForTokens(secondAmount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares.add(collateralShares1));
    }

    // Should have same amount of collateral tokens, after borrow operation
    function test_calculateTotalCollateralTokens_Borrow(uint128 _borrowAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    // Should have same amount of collateral tokens, after repayment operation
    function test_calculateTotalCollateralTokens_Repay(uint128 _repayAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    //----------------------- Credit line calculateTotalCollateralTokens, assert helper -----------------------//

    function assert_calculateTotalCollateralTokens(uint256 _creditLineId, uint256 _collateralShares) public {
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);
        uint256 calculatedCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        assertApproxEqRel(totalCollateral, calculatedCollateral, 1e14);
    }

    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//

    // Current debt is zero, CCR = max(uint256)
    function test_calculateCurrentCollateralRatio_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(creditLineId);
        assertEq(collateralRatio, type(uint256).max);
    }

    // Should have non-zero collateral ratio immediately after principal is borrowed
    // If current debt is zero, CCR = max(uint256)
    function test_calculateCurrentCollateralRatio_Borrow(uint128 _borrowAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);
    }

    // Should have non-zero collateral ratio after some amount is repaid
    function test_calculateCurrentCollateralRatio_Repay(uint128 _repayAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);
    }

    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//

    function assert_calculateCurrentCollateralRatio(uint256 _creditLineId, uint256 _collateralShares) public {
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(_creditLineId);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        if (principal == 0) {
            // After complete repayment
            assertEq(collateralRatio, type(uint256).max);
        } else {
            calculatedCollateralRatio = totalCollateral.mul(_ratioOfPrices).div(10**_decimals).mul(SCALING_FACTOR).div(principal);
            assertApproxEqRel(collateralRatio, calculatedCollateralRatio, 1e14);
        }
    }

    //----------------------- Credit line calculateBorrowableAmount tests -----------------------//

    // Should have zero borrowable amount when collateral is not deposited
    function test_calculateBorrowableAmount() public {
        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);
        assertEq(borrowableAmount, 0);
    }

    // Should have some borrowable amount after collateral is deposited
    function test_calculateBorrowableAmount_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(creditLineId);
        uint256 calculatedMaxPossible = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);
        assertApproxEqRel(borrowableAmount, Math.min(requestData.borrowLimit, calculatedMaxPossible), 1e14);
    }

    // Should have non-zero borrowable amount immediately after some amount is borrowed
    function test_calculateBorrowableAmount_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);

        assert_calculateBorrowableAmount(creditLineId, collateralShares);
    }

    // Should have zero borrowable amount immediately after all amount is borrowed
    function test_calculateBorrowableAmount_BorrowAll() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        assert_calculateBorrowableAmount(creditLineId, collateralShares);
    }

    // Should have zero borrowable after some amount is repaid
    function test_calculateBorrowableAmount_Repay(
        uint128 _borrowAmount,
        uint128 _repayAmount,
        uint128 _timeElapsed
    ) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        try borrower.repay(address(creditLine), creditLineId, repayAmount) {
            assert_calculateBorrowableAmount(creditLineId, collateralShares);
        } catch Error(string memory reason) {
            assertEq(reason, 'SA:D2');
        }
    }

    //----------------------- Credit line calculateBorrowableAmount, assert help -----------------------//

    function assert_calculateBorrowableAmount(uint256 _creditLineId, uint256 _collateralShares) public {
        (, , , , collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(_creditLineId);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        uint256 interestAccrued = creditLine.calculateInterestAccrued(_creditLineId);

        uint256 maxBorrowableAmount = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);

        if (maxBorrowableAmount <= principal.add(interestAccrued).sub(totalInterestRepaid)) {
            assertEq(borrowableAmount, 0);
        } else {
            assertApproxEqRel(
                borrowableAmount,
                Math.min(
                    maxBorrowableAmount - principal.add(interestAccrued).sub(totalInterestRepaid),
                    requestData.borrowLimit - principal
                ),
                1e14
            );
        }
    }

    //----------------------- Credit line withdrawableCollateral tests -----------------------//

    // Should have zero withdrawable collateral when collateral is not deposited
    function test_withdrawableCollateral() public {
        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);
        assertEq(withdrawable, 0);
    }

    // Should have withdrawable amount = collateral deposited, when no amount is borrowed
    function test_withdrawableCollateral_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);
        assertApproxEqAbs(withdrawable, amount, 1);
    }

    // Should have withdrawable amount < collateral deposited, when some amount is borrowed
    function test_withdrawableCollateral_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_withdrawableCollateral(creditLineId);
    }

    // Should have non-zero withdrawable collateral after some amount is repaid
    function test_withdrawableCollateral_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_withdrawableCollateral(creditLineId);
    }

    //----------------------- Credit line withdrawableCollateral, assert helper -----------------------//

    function assert_withdrawableCollateral(uint256 _creditLineId) public {
        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 withdrawable = creditLine.withdrawableCollateral(_creditLineId);
        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);
        uint256 calculatedWithdrawable = currentDebt.mul(collateralRatio).div(_ratioOfPrices).mul(10**_decimals).div(SCALING_FACTOR);

        if (calculatedWithdrawable >= totalCollateral) {
            // value more than total collateral tokens
            assertEq(withdrawable, 0);
        } else {
            assertApproxEqRel(withdrawable, totalCollateral.sub(calculatedWithdrawable), 1e14);
        }
    }

    //----------------------- Credit line borrowTokensToLiquidate tests -----------------------//

    // Should have zero borrowTokensToLiquidate when principal is not borrowed, after collateral is deposited
    function test_borrowTokensToLiquidate_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(creditLineId);
        // current debt is 0, hence borrowTokens to liquidate is also 0
        assertEq(Toliquidate, 0);
    }

    // Should have non-zero borrowTokensToLiquidate immediately after principal is borrowed
    function test_borrowTokensToLiquidate_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_borrowTokensToLiquidate(creditLineId, collateralShares);
    }

    // Should have non-zero borrowTokensToLiquidate after some amount is repaid
    function test_borrowTokensToLiquidate_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_borrowTokensToLiquidate(creditLineId, collateralShares);
    }

    //----------------------- Credit line borrowTokensToLiquidate, assert helper -----------------------//

    function assert_borrowTokensToLiquidate(uint256 _creditLineId, uint256 _collateralShares) public {
        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));
        uint256 liquidatorRewardFraction = creditLine.liquidatorRewardFraction();
        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(_creditLineId);
        uint256 debt = creditLine.calculateCurrentDebt(_creditLineId);
        uint256 equivalentCollateral = (debt).mul(10**_decimals).div(_ratioOfPrices);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        if (equivalentCollateral > totalCollateral) {
            equivalentCollateral = totalCollateral;
        }
        uint256 borrowTokens = (equivalentCollateral.mul(uint256(SCALING_FACTOR).sub(liquidatorRewardFraction)).div(SCALING_FACTOR))
            .mul(_ratioOfPrices)
            .div(10**_decimals);
        assertApproxEqRel(Toliquidate, borrowTokens, 1e14);
    }
}
.
To complete the task,  you must write a response that appropriately solves the requested instruction based on your expertise and customer's needs.]

Given the user's task and the brainstorming ideas provided:
Task: ""pragma solidity 0.7.6;
pragma abicoder v2;

import './Helpers/CLParent.sol';
import '../../PriceOracle.sol';

import '@openzeppelin/contracts/math/SafeMath.sol';

contract CreditLine_HelperFunctionTests is CLParent {
    using SafeMath for uint256;

    CreditLine creditLine;
    PriceOracle priceOracle;

    uint256 constant YEAR_IN_SECONDS = 365 days;
    uint256 constant SCALING_FACTOR = 1e18;

    uint256 public creditLineId;
    address public borrowAssetStrategy;
    address public collateralStrategy;
    uint256 _ratioOfPrices;
    uint256 _decimals;
    uint256 calculatedInterest;
    uint256 calculatedCollateralRatio;
    uint256 borrowRate;
    uint256 principal;
    uint256 totalInterestRepaid;
    uint256 collateralRatio;
    uint256 collateralTokens;

    function setUp() public virtual {
        CLSetUp();

        creditLine = CreditLine(creditLineAddress);
        priceOracle = PriceOracle(priceOracleAddress);

        (_ratioOfPrices, _decimals) = priceOracle.getLatestPrice(address(usdc), address(borrowAsset));

        requestData.requestTo = address(lender);
        // Borrow Asset equivalent of 1,000,000,000 in USD
        requestData.borrowLimit = uint128(uint256(CLConstants.maxBorrowLimit / 1e6).mul(_ratioOfPrices).div(10**_decimals));
        requestData.borrowRate = CLConstants.maxBorrowRate / 1e18;
        requestData.autoLiquidation = false;
        requestData.collateralRatio = CLConstants.maxCollteralRatio / 1e18;
        requestData.borrowAsset = address(borrowAsset);
        requestData.borrowAssetStrategy = noYieldAddress;
        requestData.collateralAsset = address(collateralAsset);
        requestData.collateralStrategy = noYieldAddress;
        requestData.requestAsLender = false;

        creditLineId = goToActiveStage();

        // Setting global parameters
        borrowAssetStrategy = requestData.borrowAssetStrategy;
        collateralStrategy = requestData.collateralStrategy;
    }

    //----------------------- Credit line calculateInterest tests -----------------------//

    // Should have zero interest when principal is not borrowed, after collateral is deposited
    function test_calculateInterest_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        // Time travel by 10 days
        _increaseBlock(block.timestamp + timeElapsed);

        // Interest after depositing collateral should be zero
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);
        assertEq(currentInterest, 0);
    }

    // Should have non-zero interest after principal is borrowed
    function test_calculateInterest_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculatedInterest(creditLineId, timeElapsed);
    }

    // Should have non-zero interest after some amount is repaid and zero after entire amount is repaid
    function test_calculateInterest_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);
        _increaseBlock(block.timestamp + 10 days);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, currentDebt.sub(Borrowable).add(1), currentDebt);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculatedInterest(creditLineId, timeElapsed);

        _increaseBlock(block.timestamp + 10 days);

        uint256 remainingDebt = creditLine.calculateCurrentDebt(creditLineId);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), remainingDebt);
        borrower.setAllowance(address(creditLine), address(borrowAsset), remainingDebt);

        borrower.repay(address(creditLine), creditLineId, remainingDebt);

        // Interest after repaying entire credit line should be zero
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, timeElapsed).div(SCALING_FACTOR);
        assertEq(currentInterest, 0);
    }

    //----------------------- Credit line calculateInterest, assert helper -----------------------//

    function assert_calculatedInterest(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentInterest = creditLine.calculateInterestScaled(principal, borrowRate, _timeElapsed).div(SCALING_FACTOR);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed).div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        assertEq(currentInterest, calculatedInterest);
    }

    //----------------------- Credit line calculateInterestAccrued tests -----------------------//

    // Should have zero interest when principal is not borrowed, after collateral is deposited
    function test_calculateInterestAccrued_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);
        assertEq(currentInterest, 0);
    }

    // Should have non-zero interest after principal is borrowed
    function test_calculateInterestAccrued_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateInterestAccrued(creditLineId, timeElapsed);
    }

    // Should have non-zero interest after some amount is repaid
    function test_calculateInterestAccrued_noPrincipal_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        uint256 interest = creditLine.calculateInterestAccrued(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, interest);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateInterestAccrued(creditLineId, timeElapsed);
    }

    //----------------------- Credit line calculateInterestAccrued, assert helper -----------------------//

    function assert_calculateInterestAccrued(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentInterest = creditLine.calculateInterestAccrued(_creditLineId);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);
        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;
        } else {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        }
        assertEq(currentInterest, calculatedInterest);
    }

    //----------------------- Credit line calculateCurrentDebt tests -----------------------//

    // Should have zero debt when principal is not borrowed, after collateral is deposited
    function test_calculateCurrentDebt_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = 10 days;

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        assertEq(currentDebt, 0);
    }

    // Should have non-zero debt immediately after principal is borrowed
    function test_calculateCurrentDebt_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);

        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateCurrentDebt(creditLineId, timeElapsed);
    }

    // Should have less debt after some amount is repaid
    function test_calculateCurrentDebt_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        uint256 currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, currentDebt);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);

        currentDebt = creditLine.calculateCurrentDebt(creditLineId);
        uint256 currentInterest = creditLine.calculateInterestAccrued(creditLineId);
        assertEq(currentDebt, currentInterest.add(principal).sub(totalInterestRepaid));
    }

    //----------------------- Credit line calculateCurrentDebt, assert helper -----------------------//

    function assert_calculateCurrentDebt(uint256 _creditLineId, uint256 _timeElapsed) public {
        (, , , borrowRate, , , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);
        calculatedInterest = principal.mul(borrowRate).mul(_timeElapsed);
        if (calculatedInterest % SCALING_FACTOR.mul(YEAR_IN_SECONDS) != 0) {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS) + 1;
        } else {
            calculatedInterest = calculatedInterest.div(SCALING_FACTOR).div(YEAR_IN_SECONDS);
        }
        assertEq(currentDebt, calculatedInterest.add(principal));
    }

    //----------------------- Credit line calculateTotalCollateralTokens tests -----------------------//

    // Should have same amount of collateral tokens, after addCollateral operation
    function test_calculateTotalCollateralTokens_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        uint256 timeElapsed = 10 days;
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    // Should have same amount of collateral tokens, after addCollateral operation
    function test_calculateTotalCollateralTokens_DepositCollateralTwice(uint128 _amount, uint128 _secondAmount) public {
        uint256 maxAmount = collateralAsset.totalSupply();
        uint256 amount = scaleToRange256(_amount, 1, maxAmount.div(3));
        uint256 secondAmount = scaleToRange256(_secondAmount, 1, maxAmount.div(3));
        uint256 timeElapsed = 5 days;
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);

        // Adding collateral again
        admin.transferToken(address(collateralAsset), address(borrower), secondAmount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), secondAmount);

        borrower.addCollateral(address(creditLine), creditLineId, secondAmount, false);
        uint256 collateralShares1 = IYield(collateralStrategy).getSharesForTokens(secondAmount, address(collateralAsset));
        _increaseBlock(block.timestamp + timeElapsed);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares.add(collateralShares1));
    }

    // Should have same amount of collateral tokens, after borrow operation
    function test_calculateTotalCollateralTokens_Borrow(uint128 _borrowAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    // Should have same amount of collateral tokens, after repayment operation
    function test_calculateTotalCollateralTokens_Repay(uint128 _repayAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateTotalCollateralTokens(creditLineId, collateralShares);
    }

    //----------------------- Credit line calculateTotalCollateralTokens, assert helper -----------------------//

    function assert_calculateTotalCollateralTokens(uint256 _creditLineId, uint256 _collateralShares) public {
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);
        uint256 calculatedCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        assertApproxEqRel(totalCollateral, calculatedCollateral, 1e14);
    }

    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//

    // Current debt is zero, CCR = max(uint256)
    function test_calculateCurrentCollateralRatio_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(creditLineId);
        assertEq(collateralRatio, type(uint256).max);
    }

    // Should have non-zero collateral ratio immediately after principal is borrowed
    // If current debt is zero, CCR = max(uint256)
    function test_calculateCurrentCollateralRatio_Borrow(uint128 _borrowAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);
    }

    // Should have non-zero collateral ratio after some amount is repaid
    function test_calculateCurrentCollateralRatio_Repay(uint128 _repayAmount) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();

        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_calculateCurrentCollateralRatio(creditLineId, collateralShares);
    }

    //----------------------- Credit line calculateCurrentCollateralRatio tests -----------------------//

    function assert_calculateCurrentCollateralRatio(uint256 _creditLineId, uint256 _collateralShares) public {
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        (collateralRatio, ) = creditLine.calculateCurrentCollateralRatio(_creditLineId);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        if (principal == 0) {
            // After complete repayment
            assertEq(collateralRatio, type(uint256).max);
        } else {
            calculatedCollateralRatio = totalCollateral.mul(_ratioOfPrices).div(10**_decimals).mul(SCALING_FACTOR).div(principal);
            assertApproxEqRel(collateralRatio, calculatedCollateralRatio, 1e14);
        }
    }

    //----------------------- Credit line calculateBorrowableAmount tests -----------------------//

    // Should have zero borrowable amount when collateral is not deposited
    function test_calculateBorrowableAmount() public {
        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);
        assertEq(borrowableAmount, 0);
    }

    // Should have some borrowable amount after collateral is deposited
    function test_calculateBorrowableAmount_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(creditLineId);
        uint256 calculatedMaxPossible = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);
        assertApproxEqRel(borrowableAmount, Math.min(requestData.borrowLimit, calculatedMaxPossible), 1e14);
    }

    // Should have non-zero borrowable amount immediately after some amount is borrowed
    function test_calculateBorrowableAmount_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);

        assert_calculateBorrowableAmount(creditLineId, collateralShares);
    }

    // Should have zero borrowable amount immediately after all amount is borrowed
    function test_calculateBorrowableAmount_BorrowAll() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        assert_calculateBorrowableAmount(creditLineId, collateralShares);
    }

    // Should have zero borrowable after some amount is repaid
    function test_calculateBorrowableAmount_Repay(
        uint128 _borrowAmount,
        uint128 _repayAmount,
        uint128 _timeElapsed
    ) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        try borrower.repay(address(creditLine), creditLineId, repayAmount) {
            assert_calculateBorrowableAmount(creditLineId, collateralShares);
        } catch Error(string memory reason) {
            assertEq(reason, 'SA:D2');
        }
    }

    //----------------------- Credit line calculateBorrowableAmount, assert help -----------------------//

    function assert_calculateBorrowableAmount(uint256 _creditLineId, uint256 _collateralShares) public {
        (, , , , collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, totalInterestRepaid, , ) = creditLine.creditLineVariables(creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 borrowableAmount = creditLine.calculateBorrowableAmount(_creditLineId);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        uint256 interestAccrued = creditLine.calculateInterestAccrued(_creditLineId);

        uint256 maxBorrowableAmount = totalCollateral.mul(_ratioOfPrices).div(collateralRatio).mul(SCALING_FACTOR).div(10**_decimals);

        if (maxBorrowableAmount <= principal.add(interestAccrued).sub(totalInterestRepaid)) {
            assertEq(borrowableAmount, 0);
        } else {
            assertApproxEqRel(
                borrowableAmount,
                Math.min(
                    maxBorrowableAmount - principal.add(interestAccrued).sub(totalInterestRepaid),
                    requestData.borrowLimit - principal
                ),
                1e14
            );
        }
    }

    //----------------------- Credit line withdrawableCollateral tests -----------------------//

    // Should have zero withdrawable collateral when collateral is not deposited
    function test_withdrawableCollateral() public {
        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);
        assertEq(withdrawable, 0);
    }

    // Should have withdrawable amount = collateral deposited, when no amount is borrowed
    function test_withdrawableCollateral_DepositCollateral(uint128 _amount) public {
        uint256 amount = scaleToRange256(_amount, 1, collateralAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 withdrawable = creditLine.withdrawableCollateral(creditLineId);
        assertApproxEqAbs(withdrawable, amount, 1);
    }

    // Should have withdrawable amount < collateral deposited, when some amount is borrowed
    function test_withdrawableCollateral_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_withdrawableCollateral(creditLineId);
    }

    // Should have non-zero withdrawable collateral after some amount is repaid
    function test_withdrawableCollateral_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_withdrawableCollateral(creditLineId);
    }

    //----------------------- Credit line withdrawableCollateral, assert helper -----------------------//

    function assert_withdrawableCollateral(uint256 _creditLineId) public {
        (, , , borrowRate, collateralRatio, , , , , , ) = creditLine.creditLineConstants(_creditLineId);
        (, principal, , , ) = creditLine.creditLineVariables(_creditLineId);

        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));

        uint256 withdrawable = creditLine.withdrawableCollateral(_creditLineId);
        uint256 currentDebt = creditLine.calculateCurrentDebt(_creditLineId);
        uint256 totalCollateral = creditLine.calculateTotalCollateralTokens(_creditLineId);
        uint256 calculatedWithdrawable = currentDebt.mul(collateralRatio).div(_ratioOfPrices).mul(10**_decimals).div(SCALING_FACTOR);

        if (calculatedWithdrawable >= totalCollateral) {
            // value more than total collateral tokens
            assertEq(withdrawable, 0);
        } else {
            assertApproxEqRel(withdrawable, totalCollateral.sub(calculatedWithdrawable), 1e14);
        }
    }

    //----------------------- Credit line borrowTokensToLiquidate tests -----------------------//

    // Should have zero borrowTokensToLiquidate when principal is not borrowed, after collateral is deposited
    function test_borrowTokensToLiquidate_DepositCollateral() public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);

        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(creditLineId);
        // current debt is 0, hence borrowTokens to liquidate is also 0
        assertEq(Toliquidate, 0);
    }

    // Should have non-zero borrowTokensToLiquidate immediately after principal is borrowed
    function test_borrowTokensToLiquidate_Borrow(uint128 _borrowAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));

        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);
        uint256 BorrowAmount = scaleToRange256(_borrowAmount, 1, Borrowable);
        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, BorrowAmount);

        borrower.borrow(address(creditLine), creditLineId, BorrowAmount);
        _increaseBlock(block.timestamp + timeElapsed);
        assert_borrowTokensToLiquidate(creditLineId, collateralShares);
    }

    // Should have non-zero borrowTokensToLiquidate after some amount is repaid
    function test_borrowTokensToLiquidate_Repay(uint128 _repayAmount, uint128 _timeElapsed) public {
        uint256 amount = 100 * 10**ERC20(address(collateralAsset)).decimals();
        uint256 timeElapsed = scaleToRange256(_timeElapsed, 1, 7500 days);
        uint256 repayAmount = scaleToRange256(_repayAmount, 1, borrowAsset.totalSupply());
        admin.transferToken(address(collateralAsset), address(borrower), amount);
        borrower.setAllowance(address(creditLine), address(collateralAsset), amount);

        borrower.addCollateral(address(creditLine), creditLineId, amount, false);
        uint256 collateralShares = IYield(collateralStrategy).getSharesForTokens(amount, address(collateralAsset));
        uint256 Borrowable = creditLine.calculateBorrowableAmount(creditLineId);

        // Adding tokens to lender and depositing to lender's savings Account
        savingsAccount_depositHelper(address(lender), address(borrowAsset), borrowAssetStrategy, Borrowable);

        borrower.borrow(address(creditLine), creditLineId, Borrowable);

        _increaseBlock(block.timestamp + timeElapsed);

        // Adding tokens to borrower and setting allowance for creditline contract
        admin.transferToken(address(borrowAsset), address(borrower), repayAmount);
        borrower.setAllowance(address(creditLine), address(borrowAsset), repayAmount);

        borrower.repay(address(creditLine), creditLineId, repayAmount);
        assert_borrowTokensToLiquidate(creditLineId, collateralShares);
    }

    //----------------------- Credit line borrowTokensToLiquidate, assert helper -----------------------//

    function assert_borrowTokensToLiquidate(uint256 _creditLineId, uint256 _collateralShares) public {
        (_ratioOfPrices, _decimals) = IPriceOracle(priceOracle).getLatestPrice(address(collateralAsset), address(borrowAsset));
        uint256 liquidatorRewardFraction = creditLine.liquidatorRewardFraction();
        uint256 Toliquidate = creditLine.borrowTokensToLiquidate(_creditLineId);
        uint256 debt = creditLine.calculateCurrentDebt(_creditLineId);
        uint256 equivalentCollateral = (debt).mul(10**_decimals).div(_ratioOfPrices);
        uint256 totalCollateral = IYield(collateralStrategy).getTokensForShares(_collateralShares, address(collateralAsset));
        if (equivalentCollateral > totalCollateral) {
            equivalentCollateral = totalCollateral;
        }
        uint256 borrowTokens = (equivalentCollateral.mul(uint256(SCALING_FACTOR).sub(liquidatorRewardFraction)).div(SCALING_FACTOR))
            .mul(_ratioOfPrices)
            .div(10**_decimals);
        assertApproxEqRel(Toliquidate, borrowTokens, 1e14);
    }
}
"".
Ideas: "" Inconsistent Base Tokens Identified.

```
INCONSISTENT BASE TOKENS
'''
The contract does not verify that both the old and new strategies use the same base token during migration. This lack of verification can lead to scenarios where the new strategy accepts a different base token than what was previously used. As a result, tokens received during migration may not be recognized by the contract, leading to potential loss of funds.

To mitigate this vulnerability, it is essential to implement a check during the migration process that verifies the base token of the new strategy matches that of the old strategy. This can be done by adding a function that compares the base tokens of both strategies before allowing the migration to proceed. If the tokens do not match, the migration should be reverted, ensuring that funds remain accessible and secure.
'''
```"".
As the Security Analyst, your primary objective is to perform a thorough and detailed inspection of the provided contract code, with a particular focus on identifying vulnerabilities related to Handling Partial Withdrawals. There are two cases where the code may have Handling Partial Withdrawals vulnerabilities:
1. The contract assumes that the old strategy will have sufficient funds to fulfill the `withdraw` call for the full amount during migration. If the old strategy does not have enough funds, tokens could be left behind, leading to potential loss of funds or incomplete migration.
2. The contract should handle scenarios where only a partial amount can be withdrawn from the old strategy to ensure all funds are migrated properly.
If you identify that the contract does not properly handle partial withdrawals during strategy migration, respond with: """,,,,,
